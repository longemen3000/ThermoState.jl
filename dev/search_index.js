var documenterSearchIndex = {"docs":
[{"location":"state/#ThermodynamicState","page":"ThermodynamicState","title":"ThermodynamicState","text":"","category":"section"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"A specification is not sufficient to define a system. The Gibbs' Phase Rule specifies that a system in equilibrium has F degrees of freedom, where F = NumberOfComponents - NumberOfPhases + 2. ","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"The ThermodynamicState struct is a collection of Specs. When creating this object, the Gibbs' Phase Rule is evaluated on the specification arguments to check its validity. lets see one example: ","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia> a = state(t=300.0,ρ=5u\"mol/m^3\")\nThermodynamicState with 2 properties:\n  Temperature : 300.0[K]\n  Molar density : 5[mol m^-3]\n ```\nIn this case, neither a phase nor any amount of compounds was specified. In those cases, the function assumes when the system has one mol, one phase, and/or a single component.\n\nAnother way to build a `ThermodynamicState` struct is by directly passing `Spec`s as arguments:","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia-repl  julia>  h0 = spec(mol_h = 3000.0)  t0 = spec(t=401.0)  st = state(h0,t0) julia>  st = state(h0,t0) ThermodynamicState with 2 properties:   Molar enthalpy : 3000.0[J mol^-1]   Temperature : 401.0[K]","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"You can skip the check of the Gibbs' Phase Rule using the `check = false` keyword, or, in the case of building the state using keywords, decide to not normalize units via the \n`normalize_units= false` keyword.\n\n## Obtaining properties from a `ThermodynamicState` struct\n\nAs said in the Basics section, you can query properties from the created `ThermodynamicState` struct. the way of obtaining those properties is by calling a property function. The interface proposed by this package is the following:\n","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia prop = property(model::MyModel,state::ThermodynamicState,unit::Unitful.unit=[default],args...)","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"Dispatching on the model type, you can calculate properties from the specifications contained in `state`.\nThis package exports one single model: `FromState`, that doesn't calculate (almost) anything, just checks if the selected property is in the argument, and if it is, it returns its numerical (unit stripped) value.\nBy default, the units of the number returned correspond to SI units, you can obtain a number with appropiate units by passing a corresponding `unit` argument.\nthe `FromState` model, given a corresponding molecular weight `mw` argument, can calculate derived properties, for example:\n","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia-repl mw = 50 a = state(t=300.0,ρ=5.0u\"mol/L\") v = mass_volume(FromSpecs(),a,u\"cm^3/g\",mw) 4.0","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"The `mw` argument can be, depending of the situation, a number of vector of number. if not units are provided, a default units of `g/mol` are assumed. this conversion can be done on any unit that accepts molar, total and mass specifications, mass and moles themselves, molar and mass fractions,and molar and mass numbers.\n\n## Variable `ThermodynamicState`s\nSometimes a more direct approach is needed when properties.For example, you may want to create a function that accepts only temperature to pass it to an ODE system or an optimization system. for this purpose, the Singleton `VariableSpec` is provided. if you pass it to a `Spec` or create a `ThermodynamicState` object, the resulting `state` or `spec` will be callable:\n","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia-repl julia> a_t = state(t=VariableSpec(),ρ=5.0u\"mol/L\") ThermodynamicState(x₁) with 2 properties:   Temperature : x₁   Molar density : 5000.0[mol m^-3]","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia> a_t(300.15) ThermodynamicState with 2 properties:   Temperature : 300.15[K]   Molar density : 5000.0[mol m^-3]","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"up to 3 `VariableSpec` can be added to each `ThermodynamicState`. a spec can only have one `VariableSpec` \n\nIts important to note that the functor created accepts the arguments in the same order as the arguments passed to the state function. for example,  `st = state(t=VariableSpec(),P=VariableSpec())` will return a functor of the form `st(t,p)` whereas `st = state(P=VariableSpec(),t=VariableSpec())` will create a functor with reversed order: `st(p,t)`\n\n## Dispatching on the state type with `state_type`\n\nGood. we now have a struct designed to store thermodynamic properties. now we can create functions that dispatch on a specific combination of thermodynamic specifications, using the function `state_type(st::ThermodynamicState)`:\n","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia-repl julia> st = state(t=373.15,ρ=5.0u\"mol/L\");state_type(st) (VolumeAmount{MOLAR,DENSITY}(), Temperature(), SingleComponent())        ","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"This tuple of thermodynamic specifications are an ordered representation of the specifications contained:","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"julia-repl st1 = state(t=373.15,ρ=5.0u\"mol/L\") st2 = state(ρ=5.0u\"mol/m^3\",t=373.15,normalizeunits=false) statetype(s1) === state_type(s2) #true ``Some abstract tuple types are saved onThermoState.QuickStates`. the tuple types exported are:","category":"page"},{"location":"state/","page":"ThermodynamicState","title":"ThermodynamicState","text":"SinglePT,MultiPT\nSingleVT,MultiVT\nSinglePV,MultiPV\nSinglePS,MultiPS\nSinglePH,MultiPH\nSingleSatT,MultiSatT (Two phase equilibrium)\nSingleSatP,MultiSatP\nSingleΦT,MultiΦT  (vapor fraction, general)\nSingleΦP,MultiΦP\nSingleΦmT,MultiΦmT (mass vapor fraction, or quality)\nSingleΦmP,MultiΦmP\nSingleΦnT,MultiΦnT(molar vapor fraction)\nSingleΦnP,MultiΦnP\nSingleT,MultiT (a state that has a temperature)","category":"page"},{"location":"new_model/#Implementing-a-model-using-the-ThermoState-interface","page":"-","title":"Implementing a model using the ThermoState interface","text":"","category":"section"},{"location":"new_model/","page":"-","title":"-","text":"Using this package, we can implement a basic ideal gas model that only calculates the pressure, given a temperature and molar volume, using the relation pvₙ=Rt:","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"using ThermoState, Unitful, \nusing ThermoState.QuickStates #provides SingleVT for dispatch on state_type\nimport ThermoState: pressure #import all functions to overload, if you have a custom property, this is not necessary.\n\nimport ThermoState: molecular_weight #you can use your own name in your files, but it is recommended to use this to better interop between packages.\n\nstruct MyIdealGas\n    mw::Float64\nend\n#t\nmolecular_weight(model::MyIdealGas) = model.mw\n\n#your implementation of pressure, with v and t. \n#pass a state type to dispatch on the available properties.\nfunction pressure_impl(mt::SingleVT,model::MyIdealGas,v,t)\n    return 8.314*t/v\nend\n\nfunction pressure(model::MyIdealGas,st::ThermodynamicState,unit=u\"Pa\")\nreturn pressure(state_type(st),model,st,unit)\nend\n\nfunction pressure(mt::SingleVT,model::MyIdealGas,st::ThermodynamicState,unit)\n    v = mol_volume(FromState(),st,u\"m^3/mol\",mw)\n    t = temperature(FromState(),st,u\"K\") \n    val = pressure_impl(mt,model,v,t)\n    return convert_unit(u\"Pa\",unit,val)\nend\n\na = state(mass = 3u\"kg\",total_v = 30u\"m^3\",t=30u\"°C\")\nmodel = MyIdealGas(18.01)\np = pressure(model,a)\n","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"Using a variable state:","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"tx = state(mass = 3u\"kg\",total_v = 30u\"m^3\",t=var) #one free variable\np = pressure(model,tx(30u\"°C\"))\np_list = map(t-> pressure(model,tx(t)),273.0:373.0)","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"Here the actual function that does the work has the form $property_impl(mt,model,args...), that accepts positional arguments of the form indicated by the result obtained by state_type(st). in this example, it doesnt seem too useful, as there is only one posible implementation: SingleVT. However, this  helps when there is more than one posible pair of input to the function. For example, with this dispatch, you can do this:","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"\nstruct WaterModel end\n\n...\n\n#Enthalpy from  Pressure - Temperature \nfunction mol_enthalpy_impl(::SinglePT,::WaterModel,p,t)\n...\nend\n\n#Enthalpy from  Volume - Temperature \nfunction mol_enthalpy_impl(::SingleVT,::WaterModel,v,t)\n...\nend\n\n#Enthalpy from  Entropy - Temperature \nfunction mol_enthalpy_impl(::SingleST,::WaterModel,s,t)\n...\nend\n\n\n#Enthalpy from  Pressure - Entropy \nfunction mol_enthalpy_impl(::SinglePS,::WaterModel,p,s)\n...\nend\n\n#ThermoState interface, only needed once\nfunction mol_enthalpy(model::WaterModel,st::ThermodynamicState,unit=\"J/mol\")\n  return mol_enthalpy(state_type(st),model,st,unit)\nend\n\n#dispatch on the apropiate implementation, extracting the args from st\nfunction mol_enthalpy(mt::SingleVT,model::WaterModel,st::ThermodynamicState,unit)\n    v = mol_volume(FromState(),st,u\"m^3/mol\",mw)\n    t = temperature(FromState(),st,u\"K\") \n    val = mol_enthalpy(mt,model,v,t)\n    return convert_unit(u\"J/mol\",unit,val)\nend\n","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"You can also provide automatic conversion to mass an total units, defining the following functions:","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"\nfunction mass_enthalpy(model::WaterModel,st::ThermodynamicState,unit=\"J/kg\")\n  mol_h = mol_enthalpy(model,st) #we dont care about state_type, just the result\n  #to obtain mass_h, we need to divide by kg/mol\n  kg_per_mol = molar_mass(FromState(),st,u\"kg/mol\",molecular_weight(model)) #we can do this or overload molar_mass(WaterModel,st)\n\n  mass_h = mol_h/kg_per_mol\n  return convert_unit(u\"J/kg\",unit,mass_h)\nend\n\nfunction total_enthalpy(model::WaterModel,st::ThermodynamicState,unit=\"J\")\n  mol_h = mol_enthalpy(model,st) \n  #to obtain total_h, we need to divide by moles\n  mol = moles(FromState(),st,u\"mol\",molecular_weight(model)) #we can do this or overload moles(WaterModel,st)\n  total_h = mol_h*mol\n  return convert_unit(u\"J/kg\",unit,total_h)\nend","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"As seen here, this is an easy, but repetitive and boring task. Thankfully, julia metaprogramming helps a lot here. if you have a lot of properties, you can evaluate all those functions at once this @eval. This is an actual piece of code used on WaterIF97.jl (not published yet). the implementation functions where defined before hand, whereas the ThermoState interface is mostly defined in this @eval loop","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"for op in [:helmholtz, :gibbs, :internal_energy, :enthalpy,:cp,:cv,:volume,:entropy]\n        mol_op_impl = Symbol(:mol_,op,:_impl)\n        mass_op_impl = Symbol(:mass_,op,:_impl)\n        total_op_impl = Symbol(:total_,op,:_impl)\n        mol_op = Symbol(:mol_,op)\n        mass_op = Symbol(:mass_,op)\n        total_op = Symbol(:total_,op)\n        if op == :volume\n            _unit = u\"m^3/kg\"\n            mol_unit = u\"m^3/mol\"\n            total_unit = u\"m^3\"\n\n        elseif op in (:cv,:cp,:entropy)\n            _unit = u\"J/(kg*K)\"\n            mol_unit = u\"J/(mol*K)\"\n            total_unit = u\"J/(K)\"\n        else\n            _unit = u\"J/(kg)\"\n            mol_unit = u\"J/(mol)\"\n            total_unit = u\"J\"\n        end\n     \n        @eval begin\n\n            #dispatch basic mass impl to the correct region, P,T\n            function $mass_op_impl(mt::SinglePT,model::IndustrialWater,p,t)\n                id = region_id(mt,model,p,t)\n                return $mass_op_impl(mt,IF97Region{id}(),p,t)\n            end\n\n\n            function $mass_op(model::IndustrialWater,st::ThermodynamicState,unit=$_unit)\n                return $mass_op(state_type(st),model,st,unit)\n            end\n            # P T impl\n            function $mass_op(mt::SinglePT,model::IndustrialWater,st::ThermodynamicState,unit)\n                p = pressure(FromState(),st)\n                t = temperature(FromState(),st)\n                res = $mass_op_impl(mt,model,p,t)\n                return convert_unit($_unit,unit,res)\n            end\n\n            #mol op\n            function $mol_op(model::IndustrialWater,st::ThermodynamicState,unit=$mol_unit)\n                prod = molar_mass(FromState(),st,u\"kg/mol\",molecular_weight(model))\n                res =  $mass_op(state_type(st),model,st,$_unit)*prod\n                return convert_unit($mol_unit,unit,res)\n            end \n        end\n\n        if !(op in (:cv,:cp))\n            #total ops, cv and cp dont have total operations\n            @eval begin\n                function $total_op(model::IndustrialWater,st::ThermodynamicState,unit=$total_unit)\n                    prod = mass(FromState(),st,u\"kg\",molecular_weight(model))\n                    res =  $mass_op(mt,model,st,unit)*prod\n                    return convert_unit($total_unit,unit,res)\n                end\n            end\n        end\n\n    if op != :enthalpy\n        @eval begin\n            #if not enthalpy, define PH impl\n            function $mass_op_impl(mt::SinglePH,model::IndustrialWater,p,h)\n                id = region_id(mt,model,p,h)\n                return $mass_op_impl(mt,IF97Region{id}(),p,h)\n            end\n\n            function $mass_op(mt::SinglePH,model::IndustrialWater,st::ThermodynamicState,unit)\n                p = pressure(FromState(),st)\n                h = mass_enthalpy(FromState(),st)\n                res = $mass_op_impl(mt,model,p,h)\n                return convert_unit($_unit,unit,res)\n            end\n        end   \n    end\n\n    if op != :entropy\n        @eval begin\n            #if not entropy, define PS impl\n            function $mass_op_impl(mt::SinglePS,model::IndustrialWater,p,s)\n                id = region_id(mt,model,p,h)\n                t = temperature_impl(mt,IF97Region{id}(),p,s) #transform to SinglePT\n                _mt = QuickStates.pt()\n                return $mass_op_impl(_mt,model,p,t)\n            end\n\n            function $mass_op(mt::SinglePS,model::IndustrialWater,st::ThermodynamicState,unit)\n                p = pressure(FromState(),st)\n                s = mass_entropy(FromState(),st)\n                res = $mass_op_impl(mt,model,p,s)\n                return convert_unit($_unit,unit,res)\n            end\n        end   \n    end\nend","category":"page"},{"location":"new_model/","page":"-","title":"-","text":"With this loop, we defined at 22 property accessor functions, in molar, mass an total units, with 3 implementations each (except enthalpy and entropy, with 2 implementations).","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"For defining property specifications, the package defines the AbstractSpec types and the Spec container. an individual specification can be defined by:","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"using Unitful, ThermoState\nh0 = spec(mol_h=\"kg/mol\")","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"You can create various specifications with the state function:","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"st = state(v=990u\"m^3/mol\",T=350u\"K\",mass=3u\"mg\")","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"And extract values for the use of property models:","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"mass_rho0=mass_density(FromState(),st,\"kg/L\",18.0u\"g/mol\")","category":"page"},{"location":"spec/#Specification-Object-(Spec)","page":"The Specification Object (Spec)","title":"Specification Object (Spec)","text":"","category":"section"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"A Spec is just a tagged value. it can be constructed by two ways:","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"type-value constructor: \n t0 = spec(Types.Temperature(),300.15)\n t0 = spec(Types.Temperature(),30u\"°C\") #normalized\n t0 = spec(Types.Temperature(),30u\"°C\",false) #not normalized\ntype-value constructor (using @spec_str macro): \n t0 = spec(spec\"t\",300.15)\n t0 = spec(spec\"t\",30u\"°C\") #normalized\n t0 = spec(spec\"t\",30u\"°C\",false) #not normalized\nby default, unitful quantities are unit stripped and normalized to SI units, you can use the argument normalize_units to change that default.\nkeyword constructor: \n t0 = spec(t= 300.15)\n t0 = spec(T= 30u\"°C\") \n t0 = spec(T = 30u\"°C\",normalize_units= false) ","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"All keyword arguments are stored in the KW_TO_SPEC dict keys. The Main difference between the type-value constructor and the keyword constructor is that the first can be resolved at compile time, where as the second has a runtime cost.","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"The result of those operations is a Spec struct:","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"julia> t0 = spec(T = 30.0u\"°C\")     \nspec(t = 303.15[K])\n\njulia> typeof(t0)\nSpec{ThermoState.Types.Temperature,Float64}\n\njulia> val_t0 = value(t0) #extracting value\n303.15\n\njulia> spec_t0 = specification(t0) #specification of t0 \nTemperature()","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"an example of a enthalpy specification:","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"julia> h0 = spec(mol_h = 3000.0)\nspec(mol_h = 3000.0[J mol^-1])\n\njulia> specification(h0)\nEnthalpy{MOLAR}()\n\njulia> typeof(h0)\nSpec{ThermoState.Types.Enthalpy{ThermoState.Types.MOLAR},Float64} ##?","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"In this case, the specification type is a parametric singleton struct: Enthalpy{MOLAR}. the MOLAR parameter is known as a spec modifier , and is used for dispatch in unit transformations and conversions (from molar to mass units, for example).","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"There are two special cases with two parameters: volume amounts (molar, total and specific volume, mass and molar density) and material compound proportions (mass numbers, mol numbers, mass fractions and mol fractions). volume amounts are tagged with the specification VolumeAmount{<:SpecModifier,<:SpecModifier} and material compounds tagged with the specification MaterialCompounds{<:SpecModifier,<:SpecModifier}. lets see some examples:","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"julia> using ThermoState.Types #importing the spec types for shorter printing\n\n\njulia> typeof(specification(spec(mol_v = 0.005)))\nVolumeAmount{MOLAR,VOLUME}\n\njulia> typeof(spec\"mol_v\")\nVolumeAmount{MOLAR,VOLUME}\n\njulia> typeof(specification(spec(mass_rho = 875.2)))\nVolumeAmount{TOTAL,DENSITY}\n\njulia> typeof(specification(spec(xn = [0.5,0.5])))\nMaterialCompounds{MOLAR,FRACTION}\n\njulia> typeof(specification(spec(m = [40.2,35.3])))\nMaterialCompounds{MASS,TOTAL_AMOUNT}","category":"page"},{"location":"spec/","page":"The Specification Object (Spec)","title":"The Specification Object (Spec)","text":"There are two special types: PhaseTag (keyword = phase) and Options (keyword = options). the first is useful to signal an underlying model to calculate just one phase (for example, in cubic equations, the root calculation gives the vapor and liquid volumes). Options accepts a named tuple that can be passed to any underlying model to specify numerical options (choice of differentiation method, maximum iterations,etc).","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ThermoState","category":"page"},{"location":"#ThermoState","page":"Home","title":"ThermoState","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ThermoState.jl is a basic block for interfacing and specifying thermodynamic models. this package proposes and provides tools to create a common property interface of the form: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"property(model,state,unit)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package proposes the following conventions for naming properties:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mol_$PROPERTY is a property of units U/mol (molar volume, molar Helmholtz energy, molar enthalpy, etc)\nmass_$PROPERTY is a property of units U/kg.\ntotal_$PROPERTY is a property of units U. (total Helmholtz energy has joule units)","category":"page"},{"location":"","page":"Home","title":"Home","text":"See all defined properties in the API section","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"utils/#Exported-utilities","page":"Utilities","title":"Exported utilities","text":"","category":"section"},{"location":"utils/#@to_units","page":"Utilities","title":"@to_units","text":"","category":"section"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"Sometimes, Unitful quantities are needed. by default (and convention) all property accessors return a number without units, in SI system. You can automatically prefix the correct unit to the accessor function adding the @to_units macro at the start of the expression","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"st = state(t=1.0u\"K\",p=2.0u\"Pa\")\nt0 = temperature(FromState(),st) #returns 1.0\nt1 = @to_units temperature(FromState(),st) #returns 1.0 K\nt1 = @to_units temperature(FromState(),st)","category":"page"},{"location":"utils/#@spec_str","page":"Utilities","title":"@spec_str","text":"","category":"section"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"Calling spec(;key = value,normalize_units=true) is simple, but it has a runtime cost. on the other part, spec(sp::AbstractSpec,value,normalize_units::Bool=true) can be determined at compile time. A problem with this interface is that writing the correct type can be cumbersome, for example, for some molar numbers:","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"n0 = spec(MaterialCompounds{MOLAR,TOTAL_AMOUNT}(),[0.1,0.3]) #very long type declaration","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"The @spec_str helps in this situation, creating the AbstractSpec type corresponding to the input keyword:","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"n1 = spec(spec\"n\",[0.1,0.3]) #shorter\nn0 == n1 #true","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"The statement spec(spec\"n\",[0.1,0.3]) can be defined at compile time.","category":"page"},{"location":"utils/#normalize_units(val)","page":"Utilities","title":"normalize_units(val)","text":"","category":"section"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"On normal numbers, it is the identity, but on numbers or vectors of Unitful.Quantity,it converts the unit to an equivalent SI unit and strips the unit information.","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"x = 0.0u\"°C\"\nnormalize_units(x) #273.15","category":"page"},{"location":"utils/#convert_unit(from,to,val)","page":"Utilities","title":"convert_unit(from,to,val)","text":"","category":"section"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"Converts an unit from the unit stored in from to the unit stored in to. when both units are equal, it justs returns val. if val itself is an unit, then it convert the from the unit in val to the unit in to. ","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"convert_unit(u\"Pa\",u\"kPa\",1000.0) #1.0\nconvert_unit(u\"Pa\",u\"kPa\",1u\"atm\") #101.325","category":"page"},{"location":"utils/#default_units(val)","page":"Utilities","title":"default_units(val)","text":"","category":"section"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"Returns the SI unit of a thermodynamic specification type or a function name corresponding to those types:","category":"page"},{"location":"utils/","page":"Utilities","title":"Utilities","text":"#from a function\ndefault_units(mol_density) #u\"mol/m^3\"\n\n#from a thermodynamic specification type\ndefault_units(Pressure()) #u\"Pa\"","category":"page"}]
}
